#!/bin/bash

# VittoriaDB Configuration Endpoint Demo
# This script demonstrates the new GET /config endpoint

echo "üîß VittoriaDB Configuration Endpoint Demo"
echo "=========================================="

# Check if VittoriaDB is running
echo ""
echo "üì° 1. Checking if VittoriaDB is running..."
if curl -s http://localhost:8080/health > /dev/null 2>&1; then
    echo "   ‚úÖ VittoriaDB is running"
else
    echo "   ‚ùå VittoriaDB is not running. Please start it with: ./vittoriadb run"
    exit 1
fi

# Test the configuration endpoint
echo ""
echo "üîß 2. Fetching current configuration..."
echo "   üì° GET http://localhost:8080/config"
echo ""

# Get configuration and format it nicely
CONFIG_RESPONSE=$(curl -s http://localhost:8080/config)

if [ $? -eq 0 ] && [ -n "$CONFIG_RESPONSE" ]; then
    echo "‚úÖ Configuration retrieved successfully!"
    echo ""
    
    # Extract key information using jq if available
    if command -v jq > /dev/null 2>&1; then
        echo "üìä Key Configuration Summary:"
        echo "   ‚Ä¢ Config Source: $(echo "$CONFIG_RESPONSE" | jq -r '.metadata.source // "default"')"
        echo "   ‚Ä¢ Server: $(echo "$CONFIG_RESPONSE" | jq -r '.config.server.host'):$(echo "$CONFIG_RESPONSE" | jq -r '.config.server.port')"
        echo "   ‚Ä¢ Data Directory: $(echo "$CONFIG_RESPONSE" | jq -r '.config.data_dir')"
        echo ""
        
        echo "‚ö° Performance Features:"
        echo "   ‚Ä¢ Parallel Search: $(echo "$CONFIG_RESPONSE" | jq -r '.features.parallel_search')"
        echo "   ‚Ä¢ Search Cache: $(echo "$CONFIG_RESPONSE" | jq -r '.features.search_cache')"
        echo "   ‚Ä¢ Memory-Mapped I/O: $(echo "$CONFIG_RESPONSE" | jq -r '.features.memory_mapped_io')"
        echo "   ‚Ä¢ SIMD Optimizations: $(echo "$CONFIG_RESPONSE" | jq -r '.features.simd_optimizations')"
        echo "   ‚Ä¢ Async I/O: $(echo "$CONFIG_RESPONSE" | jq -r '.features.async_io')"
        echo ""
        
        echo "üìà Performance Settings:"
        echo "   ‚Ä¢ Max Workers: $(echo "$CONFIG_RESPONSE" | jq -r '.performance.max_workers')"
        echo "   ‚Ä¢ Cache Entries: $(echo "$CONFIG_RESPONSE" | jq -r '.performance.cache_entries')"
        echo "   ‚Ä¢ Cache TTL: $(echo "$CONFIG_RESPONSE" | jq -r '.performance.cache_ttl')"
        echo "   ‚Ä¢ Max Concurrency: $(echo "$CONFIG_RESPONSE" | jq -r '.performance.max_concurrency')"
        echo ""
        
        echo "üìÑ Full Configuration (formatted):"
        echo "$CONFIG_RESPONSE" | jq .
    else
        echo "üìÑ Raw Configuration Response:"
        echo "$CONFIG_RESPONSE"
        echo ""
        echo "üí° Tip: Install 'jq' for formatted JSON output: brew install jq"
    fi
else
    echo "‚ùå Failed to retrieve configuration"
    exit 1
fi

echo ""
echo "üéâ Configuration endpoint demo completed!"
echo ""
echo "üìö Usage Examples:"
echo "   # Get full configuration"
echo "   curl http://localhost:8080/config"
echo ""
echo "   # Get specific feature status (with jq)"
echo "   curl -s http://localhost:8080/config | jq '.features.parallel_search'"
echo ""
echo "   # Get performance settings"
echo "   curl -s http://localhost:8080/config | jq '.performance'"
echo ""
echo "   # Get configuration metadata"
echo "   curl -s http://localhost:8080/config | jq '.metadata'"
